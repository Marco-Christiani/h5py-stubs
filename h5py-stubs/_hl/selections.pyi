from collections.abc import Generator
from typing import overload

from optype import numpy as onpt
from typing_extensions import Self  # noqa: UP035

from h5py._hl.dataset import Dataset
from h5py.h5r import RegionReference
from h5py.h5s import SpaceID

@overload
def select(shape: tuple[int, ...], args: Selection | tuple[Selection], dataset: Dataset | None = None) -> Selection: ...
@overload
def select(shape: tuple[int, ...], args: onpt.AnyBoolArray, dataset: Dataset | None = None) -> PointSelection: ...
@overload
def select(shape: tuple[int, ...], args: RegionReference, dataset: Dataset | None = None) -> Selection: ...
@overload
def select(shape: tuple[int, ...], args: object, dataset: Dataset | None = None) -> Selection | FancySelection: ...

class Selection:
    def __init__(self, shape: tuple[int, ...], spaceid: SpaceID | None = None) -> None: ...
    @property
    def id(self) -> SpaceID: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def nselect(self) -> int: ...
    @property
    def mshape(self) -> tuple[int, ...]: ...
    @property
    def array_shape(self) -> tuple[int, ...]: ...
    def expand_shape(self, source_shape: tuple[int, ...]) -> None: ...
    def broadcast(self, source_shape: tuple[int, ...]) -> Generator[SpaceID, None, None]: ...
    def __getitem__(self, args: object) -> object: ...

class PointSelection(Selection):
    def __init__(self, shape: tuple[int, ...], spaceid: SpaceID | None = None, points: onpt.CanArray | None = None) -> None: ...
    @classmethod
    def from_mask(cls, mask: onpt.AnyBoolArray, spaceid: SpaceID | None = None) -> Self: ...
    def append(self, points: onpt.CanArray) -> None: ...
    def prepend(self, points: onpt.CanArray) -> None: ...
    def set(self, points: onpt.CanArray) -> None: ...

class SimpleSelection(Selection):
    def __init__(
        self,
        shape: tuple[int, ...],
        spaceid: SpaceID | None = None,
        hyperslab: tuple[tuple[int, ...], tuple[int, ...], tuple[int, ...], tuple[bool, ...]] = ...,
    ) -> None: ...
    @property
    def mshape(self) -> tuple[int, ...]: ...
    @property
    def array_shape(self) -> tuple[int, ...]: ...
    def expand_shape(self, source_shape: tuple[int, ...]) -> None: ...
    def broadcast(self, source_shape: tuple[int, ...]) -> Generator[SpaceID, None, None]: ...

class FancySelection(Selection):
    def __init__(
        self,
        shape: tuple[int, ...],
        spaceid: SpaceID | None = None,
        mshape: tuple[int, ...] | None = None,
        array_shape: tuple[int, ...] | None = None,
    ) -> None: ...
    @property
    def mshape(self) -> tuple[int, ...]: ...
    @property
    def array_shape(self) -> tuple[int, ...]: ...
    def expand_shape(self, source_shape: tuple[int, ...]) -> None: ...
    def broadcast(self, source_shape: tuple[int, ...]) -> Generator[SpaceID, None, None]: ...

def guess_shape(sid: SpaceID) -> tuple[int, ...] | None: ...
