from contextlib import contextmanager

from .base import HLObject, MutableMappingHDF5
from .vds import vds_support

class Group(HLObject, MutableMappingHDF5):
    def __init__(self, bind) -> None: ...

    _gcpl_crt_order = ...
    def create_group(self, name, track_order=...) -> Group: ...
    def create_dataset(self, name, shape=..., dtype=..., data=..., **kwds) -> Dataset: ...

    if vds_support:
        def create_virtual_dataset(self, name, layout, fillvalue=...) -> Dataset: ...
        @contextmanager
        def build_virtual_dataset(
            self, name, shape, dtype, maxshape=..., fillvalue=...
        ) -> Generator[VirtualLayout, Any, None]: ...

    def require_dataset(self, name, shape, dtype, exact=..., **kwds) -> Dataset: ...
    def create_dataset_like(self, name, other, **kwupdate) -> Dataset: ...
    def require_group(self, name) -> Group: ...
    def __getitem__(self, name) -> Group | Dataset | Datatype: ...
    def get(
        self, name, default=..., getclass=..., getlink=...
    ) -> (
        Group
        | Dataset
        | Datatype
        | type[Group]
        | type[Dataset]
        | type[Datatype]
        | type[SoftLink]
        | SoftLink
        | type[ExternalLink]
        | ExternalLink
        | type[HardLink]
        | HardLink
        | None
    ): ...
    def __setitem__(self, name, obj) -> None: ...
    def __delitem__(self, name) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Generator[Any | None, Any, None]: ...
    def __reversed__(self) -> Generator[Any | None, Any, None]: ...
    def __contains__(self, name) -> bool: ...
    def copy(
        self, source, dest, name=..., shallow=..., expand_soft=..., expand_external=..., expand_refs=..., without_attrs=...
    ) -> None: ...
    def move(self, source, dest) -> None: ...
    def visit(self, func): ...
    def visititems(self, func): ...
    def visit_links(self, func): ...
    def visititems_links(self, func): ...
    def __repr__(self) -> str: ...

class HardLink: ...

class SoftLink:
    @property
    def path(self) -> str: ...
    def __init__(self, path) -> None: ...
    def __repr__(self) -> str: ...

class ExternalLink:
    @property
    def path(self) -> Any: ...
    @property
    def filename(self) -> str: ...
    def __init__(self, filename, path) -> None: ...
    def __repr__(self) -> str: ...
