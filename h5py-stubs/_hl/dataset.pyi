from h5py import h5d

from .base import HLObject
from .vds import vds_support

def make_new_dset(
    parent,
    shape=...,
    dtype=...,
    data=...,
    name=...,
    chunks=...,
    compression=...,
    shuffle=...,
    fletcher32=...,
    maxshape=...,
    compression_opts=...,
    fillvalue=...,
    scaleoffset=...,
    track_times=...,
    external=...,
    track_order=...,
    dcpl=...,
    dapl=...,
    efile_prefix=...,
    virtual_prefix=...,
    allow_unknown_filter=...,
    rdcc_nslots=...,
    rdcc_nbytes=...,
    rdcc_w0=...,
    *,
    fill_time=...,
): ...
def open_dset(
    parent, name, dapl=..., efile_prefix=..., virtual_prefix=..., rdcc_nslots=..., rdcc_nbytes=..., rdcc_w0=..., **kwds
): ...

class AstypeWrapper:
    def __init__(self, dset, dtype) -> None: ...
    def __getitem__(self, args): ...
    def __len__(self):  # -> int:
        ...
    def __array__(self, dtype=..., copy=...): ...

class AsStrWrapper:
    def __init__(self, dset, encoding, errors=...) -> None: ...
    def __getitem__(self, args):  # -> str | ndarray[Any, dtype[Any]]:
        ...
    def __len__(self):  # -> int:
        ...
    def __array__(self, dtype=..., copy=...):  # -> ndarray[Any, dtype[Any]]:
        ...

class FieldsWrapper:
    extract_field = ...
    def __init__(self, dset, prior_dtype, names) -> None: ...
    def __array__(self, dtype=..., copy=...): ...
    def __getitem__(self, args): ...
    def __len__(self):  # -> int:
        ...

def readtime_dtype(basetype, names):  # -> dtype[void]:
    ...

class CollectiveContext:
    def __init__(self, dset) -> None: ...
    def __enter__(self):  # -> None:
        ...
    def __exit__(self, *args):  # -> None:
        ...

class ChunkIterator:
    def __init__(self, dset, source_sel=...) -> None: ...
    def __iter__(self):  # -> Self:
        ...
    def __next__(self):  # -> tuple[Any, ...]:
        ...

class Dataset(HLObject):
    def astype(self, dtype):  # -> AstypeWrapper:
        ...
    def asstr(self, encoding=..., errors=...):  # -> AsStrWrapper:
        ...
    def fields(self, names, *, _prior_dtype=...):  # -> FieldsWrapper:
        ...
    @property
    def collective(self):  # -> CollectiveContext:
        ...
    @property
    def dims(self):  # -> DimensionManager:
        ...
    @property
    def ndim(self): ...
    @property
    def shape(self): ...
    @shape.setter
    def shape(self, shape):  # -> None:
        ...
    @property
    def size(self):  # -> Literal[1] | None:
        ...
    @property
    def nbytes(self):  # -> Literal[0]:
        ...
    @property
    def dtype(self): ...
    @property
    def chunks(self):  # -> None:
        ...
    @property
    def compression(self):  # -> None:
        ...
    @property
    def compression_opts(self): ...
    @property
    def shuffle(self):  # -> bool:
        ...
    @property
    def fletcher32(self):  # -> bool:
        ...
    @property
    def scaleoffset(self):  # -> None:
        ...
    @property
    def external(self):  # -> list[Any] | None:
        ...
    @property
    def maxshape(self):  # -> tuple[Any | None, ...] | None:
        ...
    @property
    def fillvalue(self):  # -> Any:
        ...
    def __init__(self, bind, *, readonly=...) -> None: ...
    def resize(self, size, axis=...):  # -> None:
        ...
    def __len__(self): ...
    def len(self): ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def iter_chunks(self, sel=...):  # -> ChunkIterator:
        ...
    def __getitem__(self, args, new_dtype=...): ...
    def __setitem__(self, args, val): ...
    def read_direct(self, dest, source_sel=..., dest_sel=...):  # -> None:
        ...
    def write_direct(self, source, source_sel=..., dest_sel=...):  # -> None:
        ...
    def __array__(self, dtype=..., copy=...):  # -> NDArray[float64]:
        ...
    def __repr__(self):  # -> LiteralString | Literal['<Closed HDF5 dataset>']:
        ...
    def refresh(self):  # -> None:
        ...
    def flush(self):  # -> None:
        ...
    @property
    def is_virtual(self): ...
    def virtual_sources(self):  # -> list[VDSmap]:
        ...
    def make_scale(self, name=...):  # -> None:
        ...
    @property
    def is_scale(self): ...
