import abc
from collections.abc import Callable, ItemsView, Iterable, Iterator, KeysView, Mapping, MutableMapping, ValuesView
from typing import Any, Generic, Protocol, TypeVar

from _typeshed import StrOrBytesPath
from h5py._hl.attrs import AttributeManager
from h5py._hl.files import File
from h5py._hl.group import Group
from h5py._objects import ObjectID
from h5py.h5p import PropLAID, PropLCID
from h5py.h5r import Reference
from h5py.h5s import SpaceID
from numpy import typing as npt
from optype import numpy as onpt
from typing_extensions import Self  # noqa: UP035

_K = TypeVar("_K")
_V = TypeVar("_V")
_T = TypeVar("_T")

dlapl: PropLAID | None
dlcpl: PropLCID | None

class _CanGetSpace(Protocol):
    def get_space(self) -> SpaceID: ...

def is_hdf5(fname: StrOrBytesPath) -> bool: ...
def find_item_type(data: object) -> type | None: ...
def guess_dtype(data: object) -> onpt.DType | None: ...
def is_float16_dtype(dt: onpt.AnyDType | None) -> bool: ...
def array_for_new_object(data: object, specified_dtype: onpt.AnyDType | None = None) -> npt.NDArray[Any]: ...
def default_lapl() -> PropLAID | None: ...
def default_lcpl() -> PropLCID | None: ...
def is_empty_dataspace(obj: _CanGetSpace) -> bool: ...

class CommonStateObject: ...

class _RegionProxy:
    def __init__(self, obj: ObjectID) -> None: ...
    def __getitem__(self, args: object) -> Reference: ...
    def shape(self, ref: Reference) -> tuple[int, ...]: ...
    def selection(self, ref: Reference) -> tuple[int, ...]: ...

class HLObject(CommonStateObject):
    @property
    def file(self) -> File: ...
    @property
    def name(self) -> str | None: ...
    @property
    def parent(self) -> Group: ...
    @property
    def id(self) -> ObjectID: ...
    @property
    def ref(self) -> Reference: ...
    @property
    def regionref(self) -> _RegionProxy: ...
    @property
    def attrs(self) -> AttributeManager: ...
    def __init__(self, oid: ObjectID) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __getnewargs__(self) -> object: ...
    def __getstate__(self) -> object: ...

class KeysViewHDF5(KeysView[_K]):
    def __iter__(self) -> Iterator[_K]: ...
    def __reversed__(self) -> Iterator[_K]: ...

class ValuesViewHDF5(ValuesView[_V]):
    def __contains__(self, value: object) -> bool: ...
    def __iter__(self) -> Iterator[_V]: ...
    def __reversed__(self) -> Iterator[_V]: ...

class ItemsViewHDF5(ItemsView[_K, _V]):
    def __contains__(self, item: object) -> bool: ...
    def __iter__(self) -> Iterator[tuple[_K, _V]]: ...
    def __reversed__(self) -> Iterator[tuple[_K, _V]]: ...

class MappingHDF5(Mapping[_K, _V], metaclass=abc.ABCMeta):
    def keys(self) -> KeysViewHDF5[_K]: ...
    def values(self) -> ValuesViewHDF5[_V]: ...
    def items(self) -> ItemsViewHDF5[_K, _V]: ...

class MutableMappingHDF5(MappingHDF5[_K, _V], MutableMapping[_K, _V], metaclass=abc.ABCMeta): ...

class Empty:
    shape: None = None
    size: None = None
    def __init__(self, dtype: onpt.AnyDType) -> None: ...
    def __eq__(self, other: object) -> bool: ...

def product(nums: Iterable[int]) -> int: ...

class cached_property(Generic[_T]):
    def __init__(self, func: Callable[..., _T]) -> None: ...
    def __get__(self, obj: object, cls: type) -> Self | _T: ...
