import abc
from collections.abc import ItemsView, KeysView, Mapping, MutableMapping, ValuesView
from typing import Any, Protocol

from _typeshed import StrOrBytesPath
from numpy import typing as npt
from optype import numpy as onpt

from h5py._hl.files import File
from h5py._objects import ObjectID
from h5py.h5p import PropLAID, PropLCID
from h5py.h5r import Reference
from h5py.h5s import SpaceID

dlapl: PropLAID | None
dlcpl: PropLCID | None

class _CanGetSpace(Protocol):
    def get_space(self) -> SpaceID: ...

def is_hdf5(fname: StrOrBytesPath) -> bool: ...
def find_item_type(data: object) -> type | None: ...
def guess_dtype(data: object) -> onpt.DType | None: ...
def is_float16_dtype(dt: onpt.AnyDType | None) -> bool: ...
def array_for_new_object(data: object, specified_dtype: onpt.AnyDType | None = None) -> npt.NDArray[Any]: ...
def default_lapl() -> PropLAID | None: ...
def default_lcpl() -> PropLCID | None: ...
def is_empty_dataspace(obj: _CanGetSpace) -> bool: ...

class CommonStateObject: ...

class _RegionProxy:
    def __init__(self, obj: ObjectID) -> None: ...
    def __getitem__(self, args: object) -> Reference: ...
    def shape(self, ref: Reference) -> tuple[int, ...]: ...
    def selection(self, ref: Reference) -> tuple[int, ...]: ...

class HLObject(CommonStateObject):
    @property
    def file(self) -> File: ...
    @property
    def name(self) -> str | None: ...
    @property
    def parent(self) -> Group: ...
    @property
    def id(self):  # -> Any:
        ...
    @property
    def ref(self): ...
    @property
    def regionref(self):  # -> _RegionProxy:
        ...
    @property
    def attrs(self):  # -> AttributeManager:
        ...
    def __init__(self, oid) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __bool__(self):  # -> bool:
        ...

    __nonzero__ = ...
    def __getnewargs__(self): ...
    def __getstate__(self): ...

class KeysViewHDF5(KeysView):
    def __str__(self) -> str: ...
    def __reversed__(self):  # -> Generator[Any, Any, None]:
        ...

    __repr__ = __str__

class ValuesViewHDF5(ValuesView):
    def __contains__(self, value):  # -> bool:
        ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def __reversed__(self):  # -> Generator[Any, Any, None]:
        ...

class ItemsViewHDF5(ItemsView):
    def __contains__(self, item):  # -> Literal[False]:
        ...
    def __iter__(self):  # -> Generator[tuple[Any, Any], Any, None]:
        ...
    def __reversed__(self):  # -> Generator[tuple[Any, Any], Any, None]:
        ...

class MappingHDF5(Mapping, metaclass=abc.ABCMeta):
    def keys(self):  # -> KeysViewHDF5:
        ...
    def values(self):  # -> ValuesViewHDF5:
        ...
    def items(self):  # -> ItemsViewHDF5:
        ...

class MutableMappingHDF5(MappingHDF5, MutableMapping, metaclass=abc.ABCMeta): ...

class Empty:
    shape = ...
    size = ...
    def __init__(self, dtype) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

def product(nums):  # -> Literal[1]:
    ...

class cached_property:
    def __init__(self, func) -> None: ...
    def __get__(self, obj, cls):  # -> Self:
        ...
