import abc
from collections.abc import ItemsView, KeysView, Mapping, MutableMapping, ValuesView

from h5py._objects import with_phil

def is_hdf5(fname):  # -> Literal[False]:
    ...
def find_item_type(data):  # -> type[Any] | None:
    ...
def guess_dtype(data):  # -> None:
    ...
def is_float16_dtype(dt):  # -> bool:
    ...
def array_for_new_object(data, specified_dtype=...):  # -> NDArray[Any]:
    ...
def default_lapl():  # -> None:
    ...
def default_lcpl(): ...

dlapl = ...
dlcpl = ...

def is_empty_dataspace(obj):  # -> bool:
    ...

class CommonStateObject: ...

class _RegionProxy:
    def __init__(self, obj) -> None: ...
    def __getitem__(self, args): ...
    def shape(self, ref): ...
    def selection(self, ref):  # -> tuple[Any, ...] | tuple[Literal[0], ...] | tuple[Any] | tuple[Any | int, ...] | None:
        ...

class HLObject(CommonStateObject):
    @property
    def file(self):  # -> File:
        ...
    @property
    @with_phil
    def name(self):  # -> None:
        ...
    @property
    @with_phil
    def parent(self):  # -> Group | Dataset | Datatype:
        ...
    @property
    @with_phil
    def id(self):  # -> Any:
        ...
    @property
    @with_phil
    def ref(self): ...
    @property
    @with_phil
    def regionref(self):  # -> _RegionProxy:
        ...
    @property
    def attrs(self):  # -> AttributeManager:
        ...
    @with_phil
    def __init__(self, oid) -> None: ...
    @with_phil
    def __hash__(self) -> int: ...
    @with_phil
    def __eq__(self, other) -> bool: ...
    def __bool__(self):  # -> bool:
        ...

    __nonzero__ = ...
    def __getnewargs__(self): ...
    def __getstate__(self): ...

class KeysViewHDF5(KeysView):
    def __str__(self) -> str: ...
    def __reversed__(self):  # -> Generator[Any, Any, None]:
        ...

    __repr__ = __str__

class ValuesViewHDF5(ValuesView):
    def __contains__(self, value):  # -> bool:
        ...
    def __iter__(self):  # -> Generator[Any, Any, None]:
        ...
    def __reversed__(self):  # -> Generator[Any, Any, None]:
        ...

class ItemsViewHDF5(ItemsView):
    def __contains__(self, item):  # -> Literal[False]:
        ...
    def __iter__(self):  # -> Generator[tuple[Any, Any], Any, None]:
        ...
    def __reversed__(self):  # -> Generator[tuple[Any, Any], Any, None]:
        ...

class MappingHDF5(Mapping, metaclass=abc.ABCMeta):
    def keys(self):  # -> KeysViewHDF5:
        ...
    def values(self):  # -> ValuesViewHDF5:
        ...
    def items(self):  # -> ItemsViewHDF5:
        ...

class MutableMappingHDF5(MappingHDF5, MutableMapping, metaclass=abc.ABCMeta): ...

class Empty:
    shape = ...
    size = ...
    def __init__(self, dtype) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __repr__(self):  # -> str:
        ...

def product(nums):  # -> Literal[1]:
    ...

class cached_property:
    def __init__(self, func) -> None: ...
    def __get__(self, obj, cls):  # -> Self:
        ...
